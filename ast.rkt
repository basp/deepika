#lang racket/base

(struct expr-const (val) #:transparent)
(struct expr-id (x) #:transparent)
(struct expr-binary (op lhs rhs) #:transparent)
(struct expr-unary (op val) #:transparent)
(struct expr-list (val) #:transparent)
(struct expr-hash (val) #:transparent)
(struct expr-set! (lhs rhs) #:transparent)
(struct expr-cond (pred then else) #:transparent)
(struct expr-prop (obj name) #:transparent)
(struct expr-verb (obj vdesc args) #:transparent)
(struct expr-call (fn args) #:transparent)
(struct expr-catch (try codes except) #:transparent)
(struct expr-error (type) #:transparent)
(struct stmt-expr (expr) #:transparent)
(struct stmt-cond (arms else) #:transparent)
(struct stmt-loop (id pred body) #:transparent)
(struct stmt-range (id from to body) #:transparent)
(struct stmt-while (pred body) #:transparent)
(struct stmt-return (val) #:transparent)
(struct stmt-break (id) #:transparent)
(struct stmt-continue (id) #:transparent)
(struct stmt-catch (body excepts) #:transparent)
(struct cond-arm (pred body) #:transparent)
(struct except-arm (id codes stmts) #:transparent)

(provide (all-defined-out))